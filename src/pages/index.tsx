import { type NextPage } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import { api } from "~/utils/api";
import type { RouterOutputs } from "~/utils/api";
import styles from "./index.module.css";
import { useRef } from "react";
import { toast } from "react-hot-toast";
import Link from "next/link";

const CreatePostWizard = () => {
  const { data: sessionData } = useSession();
  const ctx = api.useContext();
  const input = useRef<HTMLInputElement>(null);
  const { mutate, isLoading: isPosting } = api.posts.create.useMutation({
    onSuccess: async () => {
      if (input?.current) {
        input.current.value = "";
      }
      await ctx.posts.getAll.invalidate();
    },
    onError: (e) => {
      const errorMessage = e.data?.zodError?.fieldErrors.content?.[0];
      if (errorMessage) {
        toast.error(errorMessage);
      } else {
        toast.error("Failed post. Please type only emoji");
      }
    },
  });

  if (!sessionData) return null;

  return (
    <div>
      {sessionData.user.image && (
        <Image src={sessionData.user.image} width={48} height={48} alt="" />
      )}
      <input type="text" placeholder="Add post (only emoji)" ref={input} />
      <button
        onClick={() => {
          if (input?.current?.value) {
            mutate({
              content: input.current.value,
            });
          }
        }}
        disabled={isPosting}
      >
        Add
      </button>
    </div>
  );
};

type PostWithUser = RouterOutputs["posts"]["getAll"][number];

const PostView = ({ post, author }: PostWithUser) => {
  return (
    <div key={post.id}>
      <Link href={`/@${author?.name ?? ""}`}>
        <div>{author?.name}</div>
      </Link>
      <div>
        {author?.image && (
          <Image src={author?.image} width={24} height={24} alt="" />
        )}
      </div>
      <Link href={`/post/${post.id}`}>
        <div>{post.content}</div>
      </Link>
    </div>
  );
};

const Home: NextPage = () => {
  const { data } = api.posts.getAll.useQuery();

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.container}>
          <h1 className={styles.title}>
            Create <span className={styles.pinkSpan}>T3</span> App
          </h1>
          <CreatePostWizard />
          <div className={styles.showcaseContainer}>
            <AuthShowcase />
          </div>
          <div style={{ color: "white" }}>{data?.map(PostView)}</div>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.posts.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className={styles.authContainer}>
      <p className={styles.showcaseText}>
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className={styles.loginButton}
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
